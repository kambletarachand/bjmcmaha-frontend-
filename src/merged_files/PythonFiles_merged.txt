--- Contents of MergeFiles.py ---
import os

def merge_files_to_single_folder(root_directory):
    # Define the output directory path
    output_dir = os.path.join(root_directory, "merged_files")
    os.makedirs(output_dir, exist_ok=True)

    for dirpath, _, filenames in os.walk(root_directory):
        # Skip the output directory itself to prevent recursion
        if os.path.abspath(dirpath) == os.path.abspath(output_dir):
            continue

        # Determine a unique name for the output file based on the directory path
        relative_path = os.path.relpath(dirpath, root_directory)
        if relative_path == ".":
            output_file_name = "root_merged.txt"
        else:
            # Replace os.sep with underscores to create a valid filename
            sanitized_path = relative_path.replace(os.sep, "_")
            output_file_name = f"{sanitized_path}_merged.txt"

        output_file_path = os.path.join(output_dir, output_file_name)

        try:
            with open(output_file_path, 'w', encoding='utf-8') as outfile:
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    # Skip if it's not a file
                    if not os.path.isfile(file_path):
                        continue
                    try:
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            outfile.write(f"--- Contents of {filename} ---\n")
                            outfile.write(infile.read())
                            outfile.write("\n\n")
                    except Exception as e:
                        print(f"Error reading file {file_path}: {e}")
            print(f"Merged files in '{dirpath}' into '{output_file_path}'")
        except Exception as e:
            print(f"Error writing to file {output_file_path}: {e}")

# --- Main Execution ---
if __name__ == "__main__":
    directory = input("Enter the root directory path: ").strip()
    if os.path.isdir(directory):
        merge_files_to_single_folder(directory)
    else:
        print("Error: The provided path is not a valid directory.")


--- Contents of PythonFiles_merged.txt ---
--- Contents of MergeFiles.py ---
import os

def merge_files_per_directory(root_directory):
    for dirpath, dirnames, filenames in os.walk(root_directory):
        # Skip if there are no files in the directory
        if not filenames:
            continue

        # Create a filename for the output file based on the directory name
        dir_name = os.path.basename(dirpath)
        if not dir_name:
            dir_name = "root"  # Handle the case where dirpath ends with a slash

        output_file_name = f"{dir_name}_merged.txt"
        output_file_path = os.path.join(dirpath, output_file_name)

        try:
            with open(output_file_path, 'w', encoding='utf-8') as outfile:
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    # Skip the output file itself if it already exists in the directory
                    if filename == output_file_name:
                        continue
                    if os.path.isfile(file_path):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as infile:
                                outfile.write(f"--- Contents of {filename} ---\n")
                                outfile.write(infile.read())
                                outfile.write("\n\n")
                        except Exception as e:
                            print(f"Error reading file {file_path}: {e}")
            print(f"Merged files in '{dirpath}' into '{output_file_name}'")
        except Exception as e:
            print(f"Error writing to file {output_file_path}: {e}")

# --- Main Execution ---
if __name__ == "__main__":
    directory = input("Enter the root directory path: ").strip()
    if os.path.isdir(directory):
        merge_files_per_directory(directory)
    else:
        print("Error: The provided path is not a valid directory.")


--- Contents of TreeView.py ---
import os

def write_directory_tree(root_path, output_file, indent=""):
    try:
        entries = os.listdir(root_path)
    except FileNotFoundError:
        output_file.write(f"Error: The path '{root_path}' does not exist.\n")
        return
    except PermissionError:
        output_file.write(f"Error: Permission denied to access '{root_path}'.\n")
        return

    entries.sort()
    for i, entry in enumerate(entries):
        path = os.path.join(root_path, entry)
        is_last = (i == len(entries) - 1)
        connector = "└── " if is_last else "├── "
        output_file.write(indent + connector + entry + "\n")
        if os.path.isdir(path):
            extension = "    " if is_last else "│   "
            write_directory_tree(path, output_file, indent + extension)

# --- Main Execution ---
if __name__ == "__main__":
    directory = input("Enter directory path to print tree structure: ").strip()
    output_path = input("Enter output file path (e.g., tree_output.txt): ").strip()

    if os.path.exists(directory):
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(directory + "\n")
                write_directory_tree(directory, f)
            print(f"Directory tree has been written to '{output_path}'.")
        except Exception as e:
            print(f"Error writing to file: {e}")
    else:
        print("Error: The directory does not exist.")




--- Contents of TreeView.py ---
import os

def write_directory_tree(root_path, output_file, indent=""):
    try:
        entries = os.listdir(root_path)
    except FileNotFoundError:
        output_file.write(f"Error: The path '{root_path}' does not exist.\n")
        return
    except PermissionError:
        output_file.write(f"Error: Permission denied to access '{root_path}'.\n")
        return

    entries.sort()
    for i, entry in enumerate(entries):
        path = os.path.join(root_path, entry)
        is_last = (i == len(entries) - 1)
        connector = "└── " if is_last else "├── "
        output_file.write(indent + connector + entry + "\n")
        if os.path.isdir(path):
            extension = "    " if is_last else "│   "
            write_directory_tree(path, output_file, indent + extension)

# --- Main Execution ---
if __name__ == "__main__":
    directory = input("Enter directory path to print tree structure: ").strip()
    output_path = input("Enter output file path (e.g., tree_output.txt): ").strip()

    if os.path.exists(directory):
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(directory + "\n")
                write_directory_tree(directory, f)
            print(f"Directory tree has been written to '{output_path}'.")
        except Exception as e:
            print(f"Error writing to file: {e}")
    else:
        print("Error: The directory does not exist.")


