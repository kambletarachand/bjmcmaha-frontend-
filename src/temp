--- Contents of App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- Contents of App.js ---
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import AppRoutes from './router/AppRoutes';
import LanguageSwitcher from './components/LanguageSwitcher'; // ✅ Add this

function App() {
  return (
    <BrowserRouter>
      {/*<LanguageSwitcher /> {/* ✅ Visible globally */}
      <AppRoutes />
    </BrowserRouter>
  );
}

export default App;


--- Contents of App.test.js ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- Contents of AppRoutes.js ---
import React from 'react';
import { Routes, Route } from 'react-router-dom';

import HomePage from './pages/HomePage';
import AboutUs from './pages/AboutUs';
import News from './pages/News';
import Events from './pages/Events';
import JoinUs from './pages/JoinUs';
import Media from './pages/Media';
import Manifesto from './pages/Manifesto';
import Donate from './pages/Donate';
import ContactUs from './pages/ContactUs';
import AdminPanel from './pages/AdminPanel';
import DistrictLogin from './pages/DistrictLogin';
import NotFoundPage from './pages/NotFoundPage'; // Make sure this exists
import ProjectTree from './pages/ProjectTree';

function AppRoutes() {
    console.log({
        HomePage: typeof HomePage,
        AboutUs: typeof AboutUs,
        News: typeof News,
        Events: typeof Events
      });
      
  return (

    <Routes>
        

      <Route path="/" element={<HomePage />} />
      <Route path="/about" element={<AboutUs />} />
      <Route path="/news" element={<News />} />
      <Route path="/events" element={<Events />} />
      <Route path="/join" element={<JoinUs />} />
      <Route path="/media" element={<Media />} />
      <Route path="/manifesto" element={<Manifesto />} />
      <Route path="/donate" element={<Donate />} />
      <Route path="/contact" element={<ContactUs />} />
      <Route path="/admin-login" element={<AdminPanel />} />
      <Route path="/district-login" element={<DistrictLogin />} />
      <Route path="*" element={<NotFoundPage />} />
      
    </Routes>
  );
}

export default AppRoutes;


--- Contents of i18n.js ---
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

import translationEN from './locales/en/translation.json';
import translationHI from './locales/hi/translation.json';
import translationMR from './locales/mr/translation.json';

const resources = {
  en: { translation: translationEN },
  hi: { translation: translationHI },
  mr: { translation: translationMR },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    interpolation: { escapeValue: false },
  });

export default i18n;


--- Contents of index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- Contents of index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import './i18n'; // ✅ ADD THIS LINE to initialize i18next
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

serviceWorkerRegistration.unregister();
reportWebVitals();


--- Contents of logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>


--- Contents of merged files(05-052025) ---
--- Contents of App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- Contents of App.js ---
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import AppRoutes from './router/AppRoutes';

function App() {
  return (
    <BrowserRouter>
    
      <AppRoutes />
    </BrowserRouter>
  );
}

export default App;


--- Contents of App.test.js ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- Contents of AppRoutes.js ---
import React from 'react';
import { Routes, Route } from 'react-router-dom';

import HomePage from './pages/HomePage';
import AboutUs from './pages/AboutUs';
import News from './pages/News';
import Events from './pages/Events';
import JoinUs from './pages/JoinUs';
import Media from './pages/Media';
import Manifesto from './pages/Manifesto';
import Donate from './pages/Donate';
import ContactUs from './pages/ContactUs';
import AdminPanel from './pages/AdminPanel';
import DistrictLogin from './pages/DistrictLogin';
import NotFoundPage from './pages/NotFoundPage'; // Make sure this exists
import ProjectTree from './pages/ProjectTree';

function AppRoutes() {
    console.log({
        HomePage: typeof HomePage,
        AboutUs: typeof AboutUs,
        News: typeof News,
        Events: typeof Events
      });
      
  return (

    <Routes>
        

      <Route path="/" element={<HomePage />} />
      <Route path="/about" element={<AboutUs />} />
      <Route path="/news" element={<News />} />
      <Route path="/events" element={<Events />} />
      <Route path="/join" element={<JoinUs />} />
      <Route path="/media" element={<Media />} />
      <Route path="/manifesto" element={<Manifesto />} />
      <Route path="/donate" element={<Donate />} />
      <Route path="/contact" element={<ContactUs />} />
      <Route path="/admin-login" element={<AdminPanel />} />
      <Route path="/district-login" element={<DistrictLogin />} />
      <Route path="*" element={<NotFoundPage />} />
      
    </Routes>
  );
}

export default AppRoutes;


--- Contents of index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- Contents of index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


--- Contents of logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>


--- Contents of merged files(05-052025) ---


--- Contents of reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- Contents of service-worker.js ---
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.


--- Contents of serviceWorkerRegistration.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}


--- Contents of setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';




--- Contents of merged files(05-052025).txt ---
--- Contents of .gitkeep ---


--- Contents of AboutUs.js ---
import React from 'react';
import Layout from '../components/Layout';
import { Link } from 'react-router-dom';
import '../styles/aboutus.css';

const teamMembers = [
  { name: "Jyoti Sawardekar", designation: "State President", image: "/profile images/p.jpeg" },
  { name: "Ekta Sanghvvi", designation: "Vice President", image: "/profile images/5.jpeg" },
  { name: "Dr. Biswapriya Roy Chowdhury", designation: "General Secretary", image: "/profile images/1.jpeg"},
  { name: "Arnab Chatterjee", designation: "Joint Secretary", image: "/profile images/4.jpeg"},
  { name: "Aroona Chandrakanth Kavathekar", designation: "Treasurer", image: "/profile images/aroona.jpeg" },
  { name: "Savita Anil Pande", designation: "Media Head", image: "/profile images/2.jpeg" },
  { name: "Suresh Naik", designation: "Labour Welfare Officer", image: "/team/suresh.jpg" },
  { name: "Anjali More", designation: "Legal Advisor", image: "/team/anjali.jpg" },
  { name: "Ravi Kulkarni", designation: "Campaign Manager", image: "/team/ravi.jpg" },
  { name: "Pooja Sawant", designation: "Event Coordinator", image: "/team/pooja.jpg" },
  { name: "Nitin Kale", designation: "Social Media Lead", image: "/team/nitin.jpg" },
];

const AboutUs = () => {
  return (
    <Layout>
      <div className="aboutus-banner">
        <img
          src="/images/bjmc logo.webp"
          alt="BJMC Logo"
          className="aboutus-logo"
        />
        <div className="aboutus-content">
          <h1>About Us</h1>
          <h2>Vision, Mission & Our Journey</h2>

          <p>
            Bharatiya Janata Majdoor Cell Maharashtra is the state chapter working under the national umbrella of BJMC. Led by President Jyoti Sawardekar, BJMC Maharashtra is committed to the empowerment, organization, and representation of workers across Maharashtra. We stand for dignity in labor, equal opportunity, and the upliftment of underrepresented voices in the workforce.
          </p>

          <h2>Vision</h2>
          <p>
            To empower and safeguard the collective strength of workers across India by fostering legally recognized, transparent, and responsible trade unions that champion workers’ rights and welfare.
          </p>

          <h2>Mission</h2>
          <p>
            To regulate the formation and functioning of trade unions, ensure their legal status and immunity, promote peaceful industrial relations, and provide a democratic platform for the collective voice of labor.
          </p>

          <h2>Aim</h2>
          <ul>
            <li>To provide a legal framework for the registration and protection of trade unions.</li>
            <li>To secure immunity for registered unions in civil and criminal proceedings related to lawful trade disputes.</li>
            <li>To promote transparency and accountability in union operations through regular returns and regulations.</li>
          </ul>

          <blockquote className="highlight-quote">
            <p>
              "Unity is Strength – Established in 1926, the Shramik Sangh Adhiniyam (Trade Unions Act) laid the foundation for organized labor in India. With a vision of collective empowerment and protection, this act grants legal identity and safeguards to trade unions. Let us honor this legacy and work towards a future where every worker’s voice is heard, respected, and protected."
            </p>
          </blockquote>

          <p>
            <strong>#ShramikSanghAdhiniyam1926 #WorkersRights #UnionPower #LaborLaws #EmpoweringIndia</strong>
          </p>

          <h2>About BJMC (National)</h2>
          <p>
            Bharatiya Janata Majdoor Cell (BJMC) is a national-level organization dedicated to the rights and welfare of workers across India. BJMC Maharashtra operates as a state chapter under this national umbrella, aligning with its mission while addressing local needs.
            <Link to="/bjmc-national"> Learn more about BJMC National &rarr;</Link>
          </p>

          <h2>Our Team</h2>
          <div className="team-grid">
            {teamMembers.map((member, index) => (
              <div className="team-card" key={index}>
                <img src={member.image} alt={member.name} className="team-image" />
                <h3>{member.name}</h3>
                <p>{member.designation}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default AboutUs;


--- Contents of AdminPanel.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed

const AdminPanel = () => {
  return (
    <Layout>
      <h1>Admin Dashboard</h1>
      <p>Restricted area for managing site content and users.</p>
    </Layout>
  );
};

export default AdminPanel;


--- Contents of BJMCNational.js ---
import React from 'react';
import Layout from '../components/Layout';
import '../styles/bjmcNational.css';  // Ensure CSS matches this filename and path

const BJMCNational = () => {
  return (
    <Layout>
      <div className="bjmc-national-banner">
        <img
          src="/images/bjmc logo.webp"
          alt="BJMC National Logo"
          className="bjmc-national-logo"
        />
        <div className="bjmc-national-content">
          <h1>Bharatiya Janata Majdoor Cell (BJMC) - National</h1>
          <p>
            Bharatiya Janata Majdoor Cell (BJMC) is the labor wing of the Bharatiya Janata Party, working towards the empowerment and betterment of workers across India.
            With a vision of creating a strong and united workforce, BJMC aims to represent and safeguard the rights of workers, ensuring that their voices are heard in the political, social, and economic domains of the country.
          </p>

          <h2>Vision</h2>
          <p>
            To empower and unite workers across India by promoting their rights, ensuring their welfare, and establishing a sustainable workforce within India’s growing economy.
          </p>

          <h2>Mission</h2>
          <p>
            To regulate, support, and strengthen trade unions, ensuring their legal protection, immunity, and the voice of labor in policy-making decisions across the country.
          </p>

          <h2>Aim</h2>
          <ul>
            <li>To provide legal recognition and support to trade unions across India.</li>
            <li>To facilitate the formation of strong, transparent, and accountable unions.</li>
            <li>To ensure the safety, security, and rights of workers, both legally and socially.</li>
            <li>To work towards the empowerment of every worker through training and skill development programs.</li>
          </ul>

          <h2>History & Leadership</h2>
          <p><strong>Established in 2016</strong>, Bharatiya Janata Majdoor Cell (BJMC) is the world’s largest workers-based organization.</p>

          <div className="leader-entry">
            <img src="/images/arnab-chatterjee.jpg" alt="Arnab Chatterjee" className="leader-photo" />
            <div>
              <h3>2016 - Founded</h3>
              <p>Founded in 2016. First National President: <strong>Arnab Chatterjee</strong>.</p>
            </div>
          </div>

          <div className="leader-entry">
            <img src="/images/arnab-chatterjee.jpg" alt="Arnab Chatterjee" className="leader-photo" />
            <div>
              <h3>2025 - National President</h3>
              <p><strong>Arnab Chatterjee</strong> is the current National President of BJMC.</p>
            </div>
          </div>

          <div className="leader-entry">
            <img src="/images/biswapriya-roy.jpg" alt="Biswapriya Roy Choudhury" className="leader-photo" />
            <div>
              <h3>2025 - National Chairman</h3>
              <p><strong>Biswapriya Roy Choudhury</strong> is the National Chairman of BJMC.</p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default BJMCNational;


--- Contents of ContactUs.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed
const ContactUs = () => {
  return (
    <Layout>
      <h1>Contact Us</h1>
      <p>Get in touch with us using our inquiry form or contact details.</p>
    </Layout>
  );
};

export default ContactUs;


--- Contents of DistrictLogin.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed

const DistrictLogin = () => {
  return (
    <Layout>
      <h1>District Representative Login</h1>
      <p>Login page for local district-level representatives.</p>
    </Layout>
  );
};

export default DistrictLogin;


--- Contents of Donate.js ---
import React from 'react';
import Layout from '../components/Layout';

const Donate = () => {
  return (
    <Layout>
      <h1>Donate</h1>
      <p>Support our party by contributing through our secure donation gateway.</p>
    </Layout>
  );
};

export default Donate;


--- Contents of Events.js ---
import React, { useEffect, useState } from 'react';
import Layout from '../components/Layout';
import '../styles/events.css';

const staticEvents = {
  Celebrations: [
    {
      title: 'Labour Day Celebration',
      description: 'Grand event honoring workers with speeches, music, and food.',
    },
    {
      title: 'BJP Foundation Day',
      description: 'Cultural programs and party leadership speeches on foundation day.',
    },
  ],
  Achievements: [
    {
      title: 'Minimum Wage Policy Passed',
      description: 'Celebrating the successful passage of minimum wage legislation.',
    },
    {
      title: 'Resolved Factory Dispute',
      description: 'Negotiated agreement benefiting over 300 workers.',
    },
  ],
  Workshops: [
    {
      title: 'Worker Safety Workshop',
      description: 'Training on safety regulations and emergency procedures.',
    },
  ],
  Rallies: [
    {
      title: 'Protest for Social Security',
      description: 'Demonstration demanding pension and medical benefits.',
    },
  ],
  Meetings: [
    {
      title: 'Public Consultation on Labor Policy',
      description: 'Discussion with citizens and leaders on new labor policy drafts.',
    },
  ],
};

const categoryNames = ['All Events', ...Object.keys(staticEvents)];

const Events = () => {
  const [selectedCategory, setSelectedCategory] = useState('All Events');
  const [dynamicEvents, setDynamicEvents] = useState([]);

  useEffect(() => {
    fetch('/api/internal-news') // or /api/events depending on your backend route
      .then(res => res.json())
      .then(data => setDynamicEvents(data))
      .catch(err => console.error('Failed to load events:', err));
  }, []);

  // Combine filtered static + dynamic events based on category
  const getDisplayedEvents = () => {
    const staticList = selectedCategory === 'All Events' 
      ? Object.values(staticEvents).flat() 
      : staticEvents[selectedCategory] || [];

    const dynamicList = selectedCategory === 'All Events'
      ? dynamicEvents
      : dynamicEvents.filter(event => 
          event.category?.toLowerCase() === selectedCategory.toLowerCase()
        );

    return [...staticList, ...dynamicList];
  };

  return (
    <Layout>
    <div className="events-page">
      <div className="events-banner">
        <div className="events-content">
          <h1>Events by BJ Majdoor Cell Maharashtra</h1>
          <p>
            Stay informed about our celebrations, achievements, and worker-focused events. Empowering laborers through activism, knowledge, and unity.
          </p>
          <button className="cta-button">Join the Movement</button>
        </div>
      </div>

      <div className="event-category-tabs">
        {categoryNames.map((category) => (
          <button
            key={category}
            className={`category-btn ${selectedCategory === category ? 'active' : ''}`}
            onClick={() => setSelectedCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>

      <div className="events-list">
        <h2>{selectedCategory}</h2>
        <ul className="event-item-list">
          {getDisplayedEvents().map((event, index) => (
            <li key={index} className="event-item">
              <h3>{event.title}</h3>
              <p>{event.description}</p>
              {event.link && (
                <a href={event.link} target="_blank" rel="noopener noreferrer" className="event-btn">
                  Know More
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>
    </div>
    </Layout>
  );

};

export default Events;


--- Contents of GovernmentSchemes.js ---
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Layout from '../components/Layout';
import { BASE_URL } from '../utils/constants';
import '../styles/governmentSchemes.css';

const GovernmentSchemes = () => {
  const [schemes, setSchemes] = useState([]);
  const [filteredSchemes, setFilteredSchemes] = useState([]);
  const [search, setSearch] = useState('');

  useEffect(() => {
    const fetchSchemes = async () => {
      try {
        const [labourRes, pmYojnaRes, jobCardRes] = await Promise.all([
          axios.get(`${BASE_URL}/schemes/labour`),
          axios.get(`${BASE_URL}/schemes/pradhanmantri-yojna`),
          axios.get(`${BASE_URL}/schemes/govt-job-cards`)
        ]);

        const labourSchemes = labourRes.data.map(s => ({ ...s, category: 'Labour & Employees' }));
        const yojnaSchemes = pmYojnaRes.data.map(s => ({ ...s, category: 'Pradhan Mantri Yojna' }));
        const jobCardSchemes = jobCardRes.data.map(s => ({ ...s, category: 'Govt Job Cards' }));

        const allSchemes = [...labourSchemes, ...yojnaSchemes, ...jobCardSchemes];
        setSchemes(allSchemes);
        setFilteredSchemes(allSchemes);
      } catch (error) {
        console.error('Error fetching government schemes:', error);
      }
    };

    fetchSchemes();
  }, []);

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearch(query);
    const filtered = schemes.filter(scheme =>
      scheme.title.toLowerCase().includes(query) ||
      scheme.category.toLowerCase().includes(query)
    );
    setFilteredSchemes(filtered);
  };

  return (
    <Layout>
      <div className="schemes-container">
        <h1>Government Schemes for Labour & Employees</h1>
        <input
          type="text"
          value={search}
          onChange={handleSearch}
          placeholder="Search by scheme name or category..."
          className="search-bar"
        />
        <div className="schemes-list">
          {filteredSchemes.length === 0 ? (
            <p>No schemes found.</p>
          ) : (
            filteredSchemes.map((scheme, index) => (
              <div key={index} className="scheme-card">
                <h2>{scheme.title}</h2>
                <p><strong>Category:</strong> {scheme.category}</p>
                <p>{scheme.description}</p>
                <a href={scheme.url} target="_blank" rel="noreferrer">More Details</a>
              </div>
            ))
          )}
        </div>
      </div>
    </Layout>
  );
};

export default GovernmentSchemes;


--- Contents of Home.js ---
import React from 'react';

const Home = () => {
  return (
    <div>
      <h1>Welcome to BJMC Maharashtra</h1>
      <p>This is the official website of the political party in Maharashtra.</p>
    </div>
  );
};

export default Home;


--- Contents of HomePage.js ---
import React from "react";
import { Link } from "react-router-dom";
import "../styles/homepage.css";
import Layout from "../components/Layout";

const HomePage = () => {
  return (
    <Layout>
      <div className="homepage-container">
        <section className="hero-section">
          <div className="hero-text">
            <h1>Welcome to Bharatiya Janata Majdoor Cell Maharashtra</h1>
            <p>
              Empowering the labour force of Maharashtra through progressive
              policies, education, and events. Join the movement for worker
              rights and development.
            </p>
            <Link to="/events" className="cta-button">
              Explore Events
            </Link>
          </div>
        </section>

        <section className="about-section">
          <h2>About Us</h2>
          <p>
            The Bharatiya Janata Majdoor Cell is dedicated to protecting the
            rights of workers, conducting awareness campaigns, organizing
            celebrations for key labour milestones, and supporting development
            initiatives throughout Maharashtra.
          </p>
        </section>

        <section className="news-section">
          <h2>Latest News</h2>
          <p>
            Stay informed on recent achievements, political decisions, and
            worker welfare schemes. Read updates on rallies, policies, and
            speeches by key leaders.
          </p>
          <Link to="/news" className="cta-button secondary">
            Read News
          </Link>
        </section>

        <section className="events-banner">
          <div className="events-content">
            <h1>Upcoming Events</h1>
            <h2>Celebrations | Achievements | Awareness Drives</h2>
            <p>
              Be a part of events that celebrate the strength and success of
              workers—from May Day rallies and milestone celebrations to skill
              workshops and legal aid camps.
            </p>
            <Link to="/events" className="cta-button">
              View All Events
            </Link>
          </div>
        </section>
      </div>
    </Layout>
  );
};

export default HomePage;


--- Contents of JoinUs.js ---

// JoinUs.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/joinus.css';

const JoinUs = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Join Us</h1>
          <h2>Become a Member of BJMC Maharashtra</h2>
          <p>Join hands with us to contribute towards journalistic freedom and media empowerment in Maharashtra.</p>
        </div>
      </div>
    </Layout>
  );
};

export default JoinUs;

--- Contents of Manifesto.js ---

// Manifesto.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/manifesto.css';

const Manifesto = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Manifesto</h1>
          <h2>Our Vision and Mission</h2>
          <p>Explore our mission to uphold the values of journalism, and how we strive to protect press freedom and journalistic rights.</p>
        </div>
      </div>
    </Layout>
  );
};

export default Manifesto;

--- Contents of Media.js ---




// Media.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/media.css';

const Media = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Media</h1>
          <h2>Coverage and Multimedia</h2>
          <p>Catch up on our media coverage, video reports, photo galleries and media interactions around the state.</p>
        </div>
      </div>
    </Layout>
  );
};

export default Media;

--- Contents of News.js ---
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Layout from '../components/Layout';
import { BASE_URL } from '../utils/constants';
import '../styles/news.css';

const NewsPage = () => {
  const [externalNews, setExternalNews] = useState([]);
  const [internalNews, setInternalNews] = useState([]);

  useEffect(() => {
    axios.get(`${BASE_URL}/external-news`)
      .then(res => setExternalNews(res.data))
      .catch(err => console.error('Error loading external news:', err));

    axios.get(`${BASE_URL}/internal-news`)
      .then(res => setInternalNews(res.data))
      .catch(err => console.error('Error loading internal news:', err));
  }, []);

  return (
    <Layout>
      <div className="news-page">
        <h1>Latest News</h1>

        <section className="news-section">
          <h2>From National & Labor News Sources</h2>
          <ul className="news-list">
            {externalNews.map((item, index) => (
              <li key={index} className="news-item">
                <a href={item.link} target="_blank" rel="noopener noreferrer">
                  <h3>{item.title}</h3>
                  <p>{item.summary}</p>
                </a>
              </li>
            ))}
          </ul>
        </section>

        <section className="news-section">
          <h2>BJMC Announcements & Updates</h2>
          <div className="internal-news-grid">
            {internalNews.map((news) => (
              <div key={news.id} className="internal-news-card">
                {news.imageUrl && (
                  <img src={news.imageUrl} alt={news.title} className="news-thumbnail" />
                )}
                <div className="news-info">
                  <h3>{news.title}</h3>
                  <p>{news.content.substring(0, 120)}...</p>
                  <p className="news-meta">By {news.author} on {new Date(news.createdAt).toLocaleDateString()}</p>
                  <a href={`/news/${news.id}`} className="read-more">Read More</a>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    </Layout>
  );
};

export default NewsPage;


--- Contents of NewsAdmin.js ---
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../styles/newsAdmin.css'; // Create and style as needed

const NewsAdmin = () => {
  const [newsList, setNewsList] = useState([]);
  const [form, setForm] = useState({
    title: '',
    content: '',
    imageUrl: ''
  });

  // Fetch news on component mount
  useEffect(() => {
    fetchNews();
  }, []);

  const fetchNews = async () => {
    try {
      const res = await axios.get('http://localhost:8080/api/news');
      setNewsList(res.data);
    } catch (err) {
      console.error('Error fetching news:', err);
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:8080/api/admin/news', form);
      setForm({ title: '', content: '', imageUrl: '' });
      fetchNews(); // Refresh list
    } catch (err) {
      console.error('Error submitting news:', err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this news item?')) return;
    try {
      await axios.delete(`http://localhost:8080/api/admin/news/${id}`);
      fetchNews(); // Refresh list
    } catch (err) {
      console.error('Error deleting news:', err);
    }
  };

  return (
    <div className="news-admin">
      <h2>Upload News</h2>
      <form onSubmit={handleSubmit} className="news-form">
        <input
          type="text"
          name="title"
          placeholder="Title"
          value={form.title}
          onChange={handleChange}
          required
        />
        <textarea
          name="content"
          placeholder="Content"
          value={form.content}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="imageUrl"
          placeholder="Image URL"
          value={form.imageUrl}
          onChange={handleChange}
        />
        <button type="submit">Post News</button>
      </form>

      <h2>All News</h2>
      <table className="news-table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Date Posted</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {newsList.map((news) => (
            <tr key={news.id}>
              <td>{news.title}</td>
              <td>{new Date(news.datePosted).toLocaleString()}</td>
              <td>
                <button onClick={() => handleDelete(news.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default NewsAdmin;


--- Contents of NotFoundPage.js ---
import React from 'react';
import Layout from '../components/Layout';

const NotFoundPage = () => {
  return (
    <Layout>
      <h1></h1>
      <p>Page Not Found *</p>
    </Layout>
  );
};

export default NotFoundPage;


--- Contents of ProjectTree.js ---
import React, { useEffect, useState } from 'react';

const TreeNode = ({ node }) => {
  const isFolder = node.type === 'folder';

  return (
    <div style={{ marginLeft: 20 }}>
      <div><strong>{isFolder ? '📁' : '📄'} {node.name}</strong></div>
      {isFolder && node.children && node.children.map((child, idx) => (
        <TreeNode key={idx} node={child} />
      ))}
    </div>
  );
};

const ProjectTree = () => {
  const [tree, setTree] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3000/api/project-structure')
      .then(res => res.json())
      .then(data => setTree(data))
      .catch(err => console.error('Error fetching structure:', err));
  }, []);

  return (
    <div className="p-4 font-mono text-sm">
      <h1 className="text-xl font-bold mb-4">📂 Project Structure</h1>
      {tree ? <TreeNode node={tree} /> : <p>Loading...</p>}
    </div>
  );
};

export default ProjectTree;




--- Contents of reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- Contents of service-worker.js ---
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.


--- Contents of serviceWorkerRegistration.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}


--- Contents of setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--- Contents of temp ---
--- Contents of App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- Contents of App.js ---
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import AppRoutes from './router/AppRoutes';
import LanguageSwitcher from './components/LanguageSwitcher'; // ✅ Add this

function App() {
  return (
    <BrowserRouter>
      {/*<LanguageSwitcher /> {/* ✅ Visible globally */}
      <AppRoutes />
    </BrowserRouter>
  );
}

export default App;


--- Contents of App.test.js ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- Contents of AppRoutes.js ---
import React from 'react';
import { Routes, Route } from 'react-router-dom';

import HomePage from './pages/HomePage';
import AboutUs from './pages/AboutUs';
import News from './pages/News';
import Events from './pages/Events';
import JoinUs from './pages/JoinUs';
import Media from './pages/Media';
import Manifesto from './pages/Manifesto';
import Donate from './pages/Donate';
import ContactUs from './pages/ContactUs';
import AdminPanel from './pages/AdminPanel';
import DistrictLogin from './pages/DistrictLogin';
import NotFoundPage from './pages/NotFoundPage'; // Make sure this exists
import ProjectTree from './pages/ProjectTree';

function AppRoutes() {
    console.log({
        HomePage: typeof HomePage,
        AboutUs: typeof AboutUs,
        News: typeof News,
        Events: typeof Events
      });
      
  return (

    <Routes>
        

      <Route path="/" element={<HomePage />} />
      <Route path="/about" element={<AboutUs />} />
      <Route path="/news" element={<News />} />
      <Route path="/events" element={<Events />} />
      <Route path="/join" element={<JoinUs />} />
      <Route path="/media" element={<Media />} />
      <Route path="/manifesto" element={<Manifesto />} />
      <Route path="/donate" element={<Donate />} />
      <Route path="/contact" element={<ContactUs />} />
      <Route path="/admin-login" element={<AdminPanel />} />
      <Route path="/district-login" element={<DistrictLogin />} />
      <Route path="*" element={<NotFoundPage />} />
      
    </Routes>
  );
}

export default AppRoutes;


--- Contents of i18n.js ---
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

import translationEN from './locales/en/translation.json';
import translationHI from './locales/hi/translation.json';
import translationMR from './locales/mr/translation.json';

const resources = {
  en: { translation: translationEN },
  hi: { translation: translationHI },
  mr: { translation: translationMR },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    interpolation: { escapeValue: false },
  });

export default i18n;


--- Contents of index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- Contents of index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import './i18n'; // ✅ ADD THIS LINE to initialize i18next
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

serviceWorkerRegistration.unregister();
reportWebVitals();


--- Contents of logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>


--- Contents of merged files(05-052025) ---
--- Contents of App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- Contents of App.js ---
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import AppRoutes from './router/AppRoutes';

function App() {
  return (
    <BrowserRouter>
    
      <AppRoutes />
    </BrowserRouter>
  );
}

export default App;


--- Contents of App.test.js ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- Contents of AppRoutes.js ---
import React from 'react';
import { Routes, Route } from 'react-router-dom';

import HomePage from './pages/HomePage';
import AboutUs from './pages/AboutUs';
import News from './pages/News';
import Events from './pages/Events';
import JoinUs from './pages/JoinUs';
import Media from './pages/Media';
import Manifesto from './pages/Manifesto';
import Donate from './pages/Donate';
import ContactUs from './pages/ContactUs';
import AdminPanel from './pages/AdminPanel';
import DistrictLogin from './pages/DistrictLogin';
import NotFoundPage from './pages/NotFoundPage'; // Make sure this exists
import ProjectTree from './pages/ProjectTree';

function AppRoutes() {
    console.log({
        HomePage: typeof HomePage,
        AboutUs: typeof AboutUs,
        News: typeof News,
        Events: typeof Events
      });
      
  return (

    <Routes>
        

      <Route path="/" element={<HomePage />} />
      <Route path="/about" element={<AboutUs />} />
      <Route path="/news" element={<News />} />
      <Route path="/events" element={<Events />} />
      <Route path="/join" element={<JoinUs />} />
      <Route path="/media" element={<Media />} />
      <Route path="/manifesto" element={<Manifesto />} />
      <Route path="/donate" element={<Donate />} />
      <Route path="/contact" element={<ContactUs />} />
      <Route path="/admin-login" element={<AdminPanel />} />
      <Route path="/district-login" element={<DistrictLogin />} />
      <Route path="*" element={<NotFoundPage />} />
      
    </Routes>
  );
}

export default AppRoutes;


--- Contents of index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- Contents of index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


--- Contents of logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>


--- Contents of merged files(05-052025) ---


--- Contents of reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- Contents of service-worker.js ---
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.


--- Contents of serviceWorkerRegistration.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}


--- Contents of setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';




--- Contents of merged files(05-052025).txt ---
--- Contents of .gitkeep ---


--- Contents of AboutUs.js ---
import React from 'react';
import Layout from '../components/Layout';
import { Link } from 'react-router-dom';
import '../styles/aboutus.css';

const teamMembers = [
  { name: "Jyoti Sawardekar", designation: "State President", image: "/profile images/p.jpeg" },
  { name: "Ekta Sanghvvi", designation: "Vice President", image: "/profile images/5.jpeg" },
  { name: "Dr. Biswapriya Roy Chowdhury", designation: "General Secretary", image: "/profile images/1.jpeg"},
  { name: "Arnab Chatterjee", designation: "Joint Secretary", image: "/profile images/4.jpeg"},
  { name: "Aroona Chandrakanth Kavathekar", designation: "Treasurer", image: "/profile images/aroona.jpeg" },
  { name: "Savita Anil Pande", designation: "Media Head", image: "/profile images/2.jpeg" },
  { name: "Suresh Naik", designation: "Labour Welfare Officer", image: "/team/suresh.jpg" },
  { name: "Anjali More", designation: "Legal Advisor", image: "/team/anjali.jpg" },
  { name: "Ravi Kulkarni", designation: "Campaign Manager", image: "/team/ravi.jpg" },
  { name: "Pooja Sawant", designation: "Event Coordinator", image: "/team/pooja.jpg" },
  { name: "Nitin Kale", designation: "Social Media Lead", image: "/team/nitin.jpg" },
];

const AboutUs = () => {
  return (
    <Layout>
      <div className="aboutus-banner">
        <img
          src="/images/bjmc logo.webp"
          alt="BJMC Logo"
          className="aboutus-logo"
        />
        <div className="aboutus-content">
          <h1>About Us</h1>
          <h2>Vision, Mission & Our Journey</h2>

          <p>
            Bharatiya Janata Majdoor Cell Maharashtra is the state chapter working under the national umbrella of BJMC. Led by President Jyoti Sawardekar, BJMC Maharashtra is committed to the empowerment, organization, and representation of workers across Maharashtra. We stand for dignity in labor, equal opportunity, and the upliftment of underrepresented voices in the workforce.
          </p>

          <h2>Vision</h2>
          <p>
            To empower and safeguard the collective strength of workers across India by fostering legally recognized, transparent, and responsible trade unions that champion workers’ rights and welfare.
          </p>

          <h2>Mission</h2>
          <p>
            To regulate the formation and functioning of trade unions, ensure their legal status and immunity, promote peaceful industrial relations, and provide a democratic platform for the collective voice of labor.
          </p>

          <h2>Aim</h2>
          <ul>
            <li>To provide a legal framework for the registration and protection of trade unions.</li>
            <li>To secure immunity for registered unions in civil and criminal proceedings related to lawful trade disputes.</li>
            <li>To promote transparency and accountability in union operations through regular returns and regulations.</li>
          </ul>

          <blockquote className="highlight-quote">
            <p>
              "Unity is Strength – Established in 1926, the Shramik Sangh Adhiniyam (Trade Unions Act) laid the foundation for organized labor in India. With a vision of collective empowerment and protection, this act grants legal identity and safeguards to trade unions. Let us honor this legacy and work towards a future where every worker’s voice is heard, respected, and protected."
            </p>
          </blockquote>

          <p>
            <strong>#ShramikSanghAdhiniyam1926 #WorkersRights #UnionPower #LaborLaws #EmpoweringIndia</strong>
          </p>

          <h2>About BJMC (National)</h2>
          <p>
            Bharatiya Janata Majdoor Cell (BJMC) is a national-level organization dedicated to the rights and welfare of workers across India. BJMC Maharashtra operates as a state chapter under this national umbrella, aligning with its mission while addressing local needs.
            <Link to="/bjmc-national"> Learn more about BJMC National &rarr;</Link>
          </p>

          <h2>Our Team</h2>
          <div className="team-grid">
            {teamMembers.map((member, index) => (
              <div className="team-card" key={index}>
                <img src={member.image} alt={member.name} className="team-image" />
                <h3>{member.name}</h3>
                <p>{member.designation}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default AboutUs;


--- Contents of AdminPanel.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed

const AdminPanel = () => {
  return (
    <Layout>
      <h1>Admin Dashboard</h1>
      <p>Restricted area for managing site content and users.</p>
    </Layout>
  );
};

export default AdminPanel;


--- Contents of BJMCNational.js ---
import React from 'react';
import Layout from '../components/Layout';
import '../styles/bjmcNational.css';  // Ensure CSS matches this filename and path

const BJMCNational = () => {
  return (
    <Layout>
      <div className="bjmc-national-banner">
        <img
          src="/images/bjmc logo.webp"
          alt="BJMC National Logo"
          className="bjmc-national-logo"
        />
        <div className="bjmc-national-content">
          <h1>Bharatiya Janata Majdoor Cell (BJMC) - National</h1>
          <p>
            Bharatiya Janata Majdoor Cell (BJMC) is the labor wing of the Bharatiya Janata Party, working towards the empowerment and betterment of workers across India.
            With a vision of creating a strong and united workforce, BJMC aims to represent and safeguard the rights of workers, ensuring that their voices are heard in the political, social, and economic domains of the country.
          </p>

          <h2>Vision</h2>
          <p>
            To empower and unite workers across India by promoting their rights, ensuring their welfare, and establishing a sustainable workforce within India’s growing economy.
          </p>

          <h2>Mission</h2>
          <p>
            To regulate, support, and strengthen trade unions, ensuring their legal protection, immunity, and the voice of labor in policy-making decisions across the country.
          </p>

          <h2>Aim</h2>
          <ul>
            <li>To provide legal recognition and support to trade unions across India.</li>
            <li>To facilitate the formation of strong, transparent, and accountable unions.</li>
            <li>To ensure the safety, security, and rights of workers, both legally and socially.</li>
            <li>To work towards the empowerment of every worker through training and skill development programs.</li>
          </ul>

          <h2>History & Leadership</h2>
          <p><strong>Established in 2016</strong>, Bharatiya Janata Majdoor Cell (BJMC) is the world’s largest workers-based organization.</p>

          <div className="leader-entry">
            <img src="/images/arnab-chatterjee.jpg" alt="Arnab Chatterjee" className="leader-photo" />
            <div>
              <h3>2016 - Founded</h3>
              <p>Founded in 2016. First National President: <strong>Arnab Chatterjee</strong>.</p>
            </div>
          </div>

          <div className="leader-entry">
            <img src="/images/arnab-chatterjee.jpg" alt="Arnab Chatterjee" className="leader-photo" />
            <div>
              <h3>2025 - National President</h3>
              <p><strong>Arnab Chatterjee</strong> is the current National President of BJMC.</p>
            </div>
          </div>

          <div className="leader-entry">
            <img src="/images/biswapriya-roy.jpg" alt="Biswapriya Roy Choudhury" className="leader-photo" />
            <div>
              <h3>2025 - National Chairman</h3>
              <p><strong>Biswapriya Roy Choudhury</strong> is the National Chairman of BJMC.</p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default BJMCNational;


--- Contents of ContactUs.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed
const ContactUs = () => {
  return (
    <Layout>
      <h1>Contact Us</h1>
      <p>Get in touch with us using our inquiry form or contact details.</p>
    </Layout>
  );
};

export default ContactUs;


--- Contents of DistrictLogin.js ---
import React from 'react';
import Layout from '../components/Layout'; // Adjust the path as needed

const DistrictLogin = () => {
  return (
    <Layout>
      <h1>District Representative Login</h1>
      <p>Login page for local district-level representatives.</p>
    </Layout>
  );
};

export default DistrictLogin;


--- Contents of Donate.js ---
import React from 'react';
import Layout from '../components/Layout';

const Donate = () => {
  return (
    <Layout>
      <h1>Donate</h1>
      <p>Support our party by contributing through our secure donation gateway.</p>
    </Layout>
  );
};

export default Donate;


--- Contents of Events.js ---
import React, { useEffect, useState } from 'react';
import Layout from '../components/Layout';
import '../styles/events.css';

const staticEvents = {
  Celebrations: [
    {
      title: 'Labour Day Celebration',
      description: 'Grand event honoring workers with speeches, music, and food.',
    },
    {
      title: 'BJP Foundation Day',
      description: 'Cultural programs and party leadership speeches on foundation day.',
    },
  ],
  Achievements: [
    {
      title: 'Minimum Wage Policy Passed',
      description: 'Celebrating the successful passage of minimum wage legislation.',
    },
    {
      title: 'Resolved Factory Dispute',
      description: 'Negotiated agreement benefiting over 300 workers.',
    },
  ],
  Workshops: [
    {
      title: 'Worker Safety Workshop',
      description: 'Training on safety regulations and emergency procedures.',
    },
  ],
  Rallies: [
    {
      title: 'Protest for Social Security',
      description: 'Demonstration demanding pension and medical benefits.',
    },
  ],
  Meetings: [
    {
      title: 'Public Consultation on Labor Policy',
      description: 'Discussion with citizens and leaders on new labor policy drafts.',
    },
  ],
};

const categoryNames = ['All Events', ...Object.keys(staticEvents)];

const Events = () => {
  const [selectedCategory, setSelectedCategory] = useState('All Events');
  const [dynamicEvents, setDynamicEvents] = useState([]);

  useEffect(() => {
    fetch('/api/internal-news') // or /api/events depending on your backend route
      .then(res => res.json())
      .then(data => setDynamicEvents(data))
      .catch(err => console.error('Failed to load events:', err));
  }, []);

  // Combine filtered static + dynamic events based on category
  const getDisplayedEvents = () => {
    const staticList = selectedCategory === 'All Events' 
      ? Object.values(staticEvents).flat() 
      : staticEvents[selectedCategory] || [];

    const dynamicList = selectedCategory === 'All Events'
      ? dynamicEvents
      : dynamicEvents.filter(event => 
          event.category?.toLowerCase() === selectedCategory.toLowerCase()
        );

    return [...staticList, ...dynamicList];
  };

  return (
    <Layout>
    <div className="events-page">
      <div className="events-banner">
        <div className="events-content">
          <h1>Events by BJ Majdoor Cell Maharashtra</h1>
          <p>
            Stay informed about our celebrations, achievements, and worker-focused events. Empowering laborers through activism, knowledge, and unity.
          </p>
          <button className="cta-button">Join the Movement</button>
        </div>
      </div>

      <div className="event-category-tabs">
        {categoryNames.map((category) => (
          <button
            key={category}
            className={`category-btn ${selectedCategory === category ? 'active' : ''}`}
            onClick={() => setSelectedCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>

      <div className="events-list">
        <h2>{selectedCategory}</h2>
        <ul className="event-item-list">
          {getDisplayedEvents().map((event, index) => (
            <li key={index} className="event-item">
              <h3>{event.title}</h3>
              <p>{event.description}</p>
              {event.link && (
                <a href={event.link} target="_blank" rel="noopener noreferrer" className="event-btn">
                  Know More
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>
    </div>
    </Layout>
  );

};

export default Events;


--- Contents of GovernmentSchemes.js ---
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Layout from '../components/Layout';
import { BASE_URL } from '../utils/constants';
import '../styles/governmentSchemes.css';

const GovernmentSchemes = () => {
  const [schemes, setSchemes] = useState([]);
  const [filteredSchemes, setFilteredSchemes] = useState([]);
  const [search, setSearch] = useState('');

  useEffect(() => {
    const fetchSchemes = async () => {
      try {
        const [labourRes, pmYojnaRes, jobCardRes] = await Promise.all([
          axios.get(`${BASE_URL}/schemes/labour`),
          axios.get(`${BASE_URL}/schemes/pradhanmantri-yojna`),
          axios.get(`${BASE_URL}/schemes/govt-job-cards`)
        ]);

        const labourSchemes = labourRes.data.map(s => ({ ...s, category: 'Labour & Employees' }));
        const yojnaSchemes = pmYojnaRes.data.map(s => ({ ...s, category: 'Pradhan Mantri Yojna' }));
        const jobCardSchemes = jobCardRes.data.map(s => ({ ...s, category: 'Govt Job Cards' }));

        const allSchemes = [...labourSchemes, ...yojnaSchemes, ...jobCardSchemes];
        setSchemes(allSchemes);
        setFilteredSchemes(allSchemes);
      } catch (error) {
        console.error('Error fetching government schemes:', error);
      }
    };

    fetchSchemes();
  }, []);

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearch(query);
    const filtered = schemes.filter(scheme =>
      scheme.title.toLowerCase().includes(query) ||
      scheme.category.toLowerCase().includes(query)
    );
    setFilteredSchemes(filtered);
  };

  return (
    <Layout>
      <div className="schemes-container">
        <h1>Government Schemes for Labour & Employees</h1>
        <input
          type="text"
          value={search}
          onChange={handleSearch}
          placeholder="Search by scheme name or category..."
          className="search-bar"
        />
        <div className="schemes-list">
          {filteredSchemes.length === 0 ? (
            <p>No schemes found.</p>
          ) : (
            filteredSchemes.map((scheme, index) => (
              <div key={index} className="scheme-card">
                <h2>{scheme.title}</h2>
                <p><strong>Category:</strong> {scheme.category}</p>
                <p>{scheme.description}</p>
                <a href={scheme.url} target="_blank" rel="noreferrer">More Details</a>
              </div>
            ))
          )}
        </div>
      </div>
    </Layout>
  );
};

export default GovernmentSchemes;


--- Contents of Home.js ---
import React from 'react';

const Home = () => {
  return (
    <div>
      <h1>Welcome to BJMC Maharashtra</h1>
      <p>This is the official website of the political party in Maharashtra.</p>
    </div>
  );
};

export default Home;


--- Contents of HomePage.js ---
import React from "react";
import { Link } from "react-router-dom";
import "../styles/homepage.css";
import Layout from "../components/Layout";

const HomePage = () => {
  return (
    <Layout>
      <div className="homepage-container">
        <section className="hero-section">
          <div className="hero-text">
            <h1>Welcome to Bharatiya Janata Majdoor Cell Maharashtra</h1>
            <p>
              Empowering the labour force of Maharashtra through progressive
              policies, education, and events. Join the movement for worker
              rights and development.
            </p>
            <Link to="/events" className="cta-button">
              Explore Events
            </Link>
          </div>
        </section>

        <section className="about-section">
          <h2>About Us</h2>
          <p>
            The Bharatiya Janata Majdoor Cell is dedicated to protecting the
            rights of workers, conducting awareness campaigns, organizing
            celebrations for key labour milestones, and supporting development
            initiatives throughout Maharashtra.
          </p>
        </section>

        <section className="news-section">
          <h2>Latest News</h2>
          <p>
            Stay informed on recent achievements, political decisions, and
            worker welfare schemes. Read updates on rallies, policies, and
            speeches by key leaders.
          </p>
          <Link to="/news" className="cta-button secondary">
            Read News
          </Link>
        </section>

        <section className="events-banner">
          <div className="events-content">
            <h1>Upcoming Events</h1>
            <h2>Celebrations | Achievements | Awareness Drives</h2>
            <p>
              Be a part of events that celebrate the strength and success of
              workers—from May Day rallies and milestone celebrations to skill
              workshops and legal aid camps.
            </p>
            <Link to="/events" className="cta-button">
              View All Events
            </Link>
          </div>
        </section>
      </div>
    </Layout>
  );
};

export default HomePage;


--- Contents of JoinUs.js ---

// JoinUs.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/joinus.css';

const JoinUs = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Join Us</h1>
          <h2>Become a Member of BJMC Maharashtra</h2>
          <p>Join hands with us to contribute towards journalistic freedom and media empowerment in Maharashtra.</p>
        </div>
      </div>
    </Layout>
  );
};

export default JoinUs;

--- Contents of Manifesto.js ---

// Manifesto.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/manifesto.css';

const Manifesto = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Manifesto</h1>
          <h2>Our Vision and Mission</h2>
          <p>Explore our mission to uphold the values of journalism, and how we strive to protect press freedom and journalistic rights.</p>
        </div>
      </div>
    </Layout>
  );
};

export default Manifesto;

--- Contents of Media.js ---




// Media.js
import React from 'react';
import Layout from '../components/Layout';
import '../styles/media.css';

const Media = () => {
  return (
    <Layout>
      <div className="section-banner">
        <div className="section-content">
          <h1>Media</h1>
          <h2>Coverage and Multimedia</h2>
          <p>Catch up on our media coverage, video reports, photo galleries and media interactions around the state.</p>
        </div>
      </div>
    </Layout>
  );
};

export default Media;

--- Contents of News.js ---
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Layout from '../components/Layout';
import { BASE_URL } from '../utils/constants';
import '../styles/news.css';

const NewsPage = () => {
  const [externalNews, setExternalNews] = useState([]);
  const [internalNews, setInternalNews] = useState([]);

  useEffect(() => {
    axios.get(`${BASE_URL}/external-news`)
      .then(res => setExternalNews(res.data))
      .catch(err => console.error('Error loading external news:', err));

    axios.get(`${BASE_URL}/internal-news`)
      .then(res => setInternalNews(res.data))
      .catch(err => console.error('Error loading internal news:', err));
  }, []);

  return (
    <Layout>
      <div className="news-page">
        <h1>Latest News</h1>

        <section className="news-section">
          <h2>From National & Labor News Sources</h2>
          <ul className="news-list">
            {externalNews.map((item, index) => (
              <li key={index} className="news-item">
                <a href={item.link} target="_blank" rel="noopener noreferrer">
                  <h3>{item.title}</h3>
                  <p>{item.summary}</p>
                </a>
              </li>
            ))}
          </ul>
        </section>

        <section className="news-section">
          <h2>BJMC Announcements & Updates</h2>
          <div className="internal-news-grid">
            {internalNews.map((news) => (
              <div key={news.id} className="internal-news-card">
                {news.imageUrl && (
                  <img src={news.imageUrl} alt={news.title} className="news-thumbnail" />
                )}
                <div className="news-info">
                  <h3>{news.title}</h3>
                  <p>{news.content.substring(0, 120)}...</p>
                  <p className="news-meta">By {news.author} on {new Date(news.createdAt).toLocaleDateString()}</p>
                  <a href={`/news/${news.id}`} className="read-more">Read More</a>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    </Layout>
  );
};

export default NewsPage;


--- Contents of NewsAdmin.js ---
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../styles/newsAdmin.css'; // Create and style as needed

const NewsAdmin = () => {
  const [newsList, setNewsList] = useState([]);
  const [form, setForm] = useState({
    title: '',
    content: '',
    imageUrl: ''
  });

  // Fetch news on component mount
  useEffect(() => {
    fetchNews();
  }, []);

  const fetchNews = async () => {
    try {
      const res = await axios.get('http://localhost:8080/api/news');
      setNewsList(res.data);
    } catch (err) {
      console.error('Error fetching news:', err);
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:8080/api/admin/news', form);
      setForm({ title: '', content: '', imageUrl: '' });
      fetchNews(); // Refresh list
    } catch (err) {
      console.error('Error submitting news:', err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this news item?')) return;
    try {
      await axios.delete(`http://localhost:8080/api/admin/news/${id}`);
      fetchNews(); // Refresh list
    } catch (err) {
      console.error('Error deleting news:', err);
    }
  };

  return (
    <div className="news-admin">
      <h2>Upload News</h2>
      <form onSubmit={handleSubmit} className="news-form">
        <input
          type="text"
          name="title"
          placeholder="Title"
          value={form.title}
          onChange={handleChange}
          required
        />
        <textarea
          name="content"
          placeholder="Content"
          value={form.content}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="imageUrl"
          placeholder="Image URL"
          value={form.imageUrl}
          onChange={handleChange}
        />
        <button type="submit">Post News</button>
      </form>

      <h2>All News</h2>
      <table className="news-table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Date Posted</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {newsList.map((news) => (
            <tr key={news.id}>
              <td>{news.title}</td>
              <td>{new Date(news.datePosted).toLocaleString()}</td>
              <td>
                <button onClick={() => handleDelete(news.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default NewsAdmin;


--- Contents of NotFoundPage.js ---
import React from 'react';
import Layout from '../components/Layout';

const NotFoundPage = () => {
  return (
    <Layout>
      <h1></h1>
      <p>Page Not Found *</p>
    </Layout>
  );
};

export default NotFoundPage;


--- Contents of ProjectTree.js ---
import React, { useEffect, useState } from 'react';

const TreeNode = ({ node }) => {
  const isFolder = node.type === 'folder';

  return (
    <div style={{ marginLeft: 20 }}>
      <div><strong>{isFolder ? '📁' : '📄'} {node.name}</strong></div>
      {isFolder && node.children && node.children.map((child, idx) => (
        <TreeNode key={idx} node={child} />
      ))}
    </div>
  );
};

const ProjectTree = () => {
  const [tree, setTree] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3000/api/project-structure')
      .then(res => res.json())
      .then(data => setTree(data))
      .catch(err => console.error('Error fetching structure:', err));
  }, []);

  return (
    <div className="p-4 font-mono text-sm">
      <h1 className="text-xl font-bold mb-4">📂 Project Structure</h1>
      {tree ? <TreeNode node={tree} /> : <p>Loading...</p>}
    </div>
  );
};

export default ProjectTree;






